name: Version

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          registry-url: ${{ inputs.REGISTRY }}
          always-auth: true

      - name: Get last commit author
        run: |
          LAST_COMMIT=$(git log -1 --pretty=format:"%an|%ae")
          LAST_COMMIT_NAME=$(echo $LAST_COMMIT | cut -d '|' -f1)
          LAST_COMMIT_EMAIL=$(echo $LAST_COMMIT | cut -d '|' -f2)
          echo "COMMIT_NAME=$LAST_COMMIT_NAME" >> $GITHUB_ENV
          echo "COMMIT_EMAIL=$LAST_COMMIT_EMAIL" >> $GITHUB_ENV

      - name: Set Git Configuration
        run: |
          git config --global user.name ${{ env.COMMIT_NAME }}
          git config --global user.email ${{ env.COMMIT_EMAIL }}

      - name: Get organization name
        run: |
          ORGANIZATION_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "ORGANIZATION_NAME=$ORGANIZATION_NAME" >> $GITHUB_ENV
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Extract package version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Filter packages by version
        run: |
          PACKAGES=$(npm search --json --registry=${{ inputs.REGISTRY }} --scope=@${{ env.ORGANIZATION_NAME }} | jq -r --arg CURRENT_VERSION "${{ env.CURRENT_VERSION }}" '.[] | select(.version == "${{ env.CURRENT_VERSION }}") | .name')
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
        id: filter_packages

      - name: Update Version
        shell: bash
        run: |
          npm version --new-version ${{env.CURRENT_VERSION}}-alpha.0 --no-git-tag-version

      # - name: Update repository
      #   run: |
      #     git add .
      #     git commit -m "Update version [skip ci]"
      #     git push

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cosmoflex-version
          path: ./
